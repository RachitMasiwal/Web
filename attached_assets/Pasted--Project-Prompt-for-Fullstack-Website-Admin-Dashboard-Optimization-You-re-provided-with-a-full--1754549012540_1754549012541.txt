🚀 Project Prompt for Fullstack Website + Admin Dashboard Optimization

You're provided with a full-stack project consisting of two main parts:

client/: The main public website (formerly "unitaslogistix.com")

dashboard/: Admin portal to manage and monitor operations

server/: Express backend API

🔧 TASKS — Revamp, Secure, and Optimize Everything Below:

✅ 1. 🔐 Security & Captcha Logic
In the login/sign-in flow, if user credentials do not match what's in the database, show an error message:
❌ Invalid credentials

After every login error, refresh the CAPTCHA image or token automatically.

✅ 2. 📡 Auth & Request Flow Clarity
Clearly Tell in the readme file where and how login/signup/auth requests are sent:

client/src/api/requests.ts: Show API call going to server/api/auth/login

server/routes/auth.ts: Handle POST requests, validate credentials from MongoDB

dashboard: restrict route access unless admin is verified

Include comments like:

ts
Copy
Edit
// Sends login credentials from frontend to backend
// Auth route (server/api/auth.ts) → Validates against MongoDB
✅ 3. 🎨 UI Theme Sync + Performance Boost
For both client/ and dashboard/:
Unify design theme to match the existing unitaslogistix.com (colors, fonts, spacing)

Use Tailwind CSS (already configured) — avoid heavy UI libraries like Material UI or Ant Design to prevent slowdowns

Use React.lazy and Suspense for code-splitting on routes

Lazy load heavy assets (charts, images)

Replace animations with lightweight ones only (no full-page transitions)

✅ 4. 🚀 Performance Optimizations
Remove unused npm packages and fonts

Use only SVGs or compressed images (WebP preferred)

Enable gzip compression in the Express server

Set up caching and cache headers

Minify JS & CSS in the production build (npm run build)

Avoid unnecessary re-renders by memoizing components where needed

✅ 5. 🏢 Company Branding Update
Replace everywhere:

"ONS Logistics India Pvt. Ltd." → UNITAS LOGISTIX INC.

Email: onslogisticsindia@gmail.com → info@unitaslogistix.com

Update website metadata, footers, headers, and titles accordingly

✅ 6. 🖥️ Dashboard UI Overhaul
Match dashboard UI with the Unitas main website theme

Add analytics graphs (can use recharts) — load them lazily

Use card-based layout for sections (use Tailwind)

Ensure dashboard is fully responsive (mobile-friendly)

Add quick access nav links, hover animations (but keep lightweight)

Include activity logs, basic shipment metrics on dashboard landing page

✅ 7. 🗂️ README.md Files in Every Folder
Every major folder should include a README.md with:

Purpose of the folder

Key files inside

How this folder fits into the overall project

Example:

md
Copy
Edit
## dashboard/
Admin panel to track and manage shipments.
- Uses Wouter for routing
- Uses Tailwind for styling
- Depends on backend at /server/api

To start:
cd dashboard && npm install && npm start
✅ 8. 📦 Setup, Build & Run Instructions
README.md in root should include:

Steps to install

.env config placeholders

How to build frontend/backend separately

How to run all 3 components locally (client, dashboard, server)

Final Deliverable Expectations:

✅ Highly optimized, production-ready full-stack project
✅ Secure login system with captcha refresh on errors
✅ Matched UI themes across website and dashboard
✅ Lightweight yet modern visuals
✅ Fully documented with README in every major folder

